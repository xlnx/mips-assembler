#define Expand() \
make_reflect<ast_type>([](ast_type &ast){\
	for (auto &e: ast) e.gen(); return value_type();\
})
#define NoReflect() \
make_reflect<ast_type>([](ast_type &ast){\
	return value_type();\
})
#define Print(x) \
(machine_code << setw(8) << setfill('0') << reinterpret_cast<int&>(x) << endl)

"start"_p = 
	"Lines"_p >> Expand(),
"Lines"_p = 
	"Instruction"_p + "Lines"_p >> Expand()
	|""_t >> NoReflect(),
"Line"_p = 
	"LineBody"_p >> Expand(),
"LineLabel"_p = 
	"label"_t + ":"_t
		>> make_reflect<ast_type>([](ast_type &ast)->value_type{
			//::std::cout << ast.term(0) << ::std::endl;
		})
	|""_t
		>> NoReflect(),
"LineBody"_p = 
	//"Directive"_p >> Expand()
	"Instruction"_p >> Expand(),
//"Directive"_p =
//	""_t,
"Instruction"_p =
	"add"_t + "reg"_t + ","_t + "reg"_t + ","_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned op: 6;
				unsigned : 5;
				unsigned rd: 5;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(5).get<unsigned>();
			inst.rd = ast.term(1).get<unsigned>();
			inst.op = 0x20;
			Print(inst);
		})
	|"sub"_t + "reg"_t + ","_t + "reg"_t + ","_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned op: 6;
				unsigned : 5;
				unsigned rd: 5;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(5).get<unsigned>();
			inst.rd = ast.term(1).get<unsigned>();
			inst.op = 0x22;
			Print(inst);
		})
	|"and"_t + "reg"_t + ","_t + "reg"_t + ","_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned op: 6;
				unsigned : 5;
				unsigned rd: 5;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(5).get<unsigned>();
			inst.rd = ast.term(1).get<unsigned>();
			inst.op = 0x24;
			Print(inst);
		})
	|"or"_t + "reg"_t + ","_t + "reg"_t + ","_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned op: 6;
				unsigned : 5;
				unsigned rd: 5;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(5).get<unsigned>();
			inst.rd = ast.term(1).get<unsigned>();
			inst.op = 0x25;
			Print(inst);
		})
	|"addi"_t + "reg"_t + ","_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned imm: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(1).get<unsigned>();
			inst.imm = ast.term(5).get<int>();
			inst.op = 8;
			Print(inst);
		})
	|"ori"_t + "reg"_t + ","_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned imm: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(1).get<unsigned>();
			inst.imm = ast.term(5).get<int>();
			inst.op = 0xd;
			Print(inst);
		})
	|"sll"_t + "reg"_t + ","_t + "reg"_t + ","_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned : 6;
				unsigned shamt: 5;
				unsigned rd: 5;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rd = ast.term(1).get<unsigned>();
			inst.rt = ast.term(3).get<unsigned>();
			inst.shamt = ast.term(5).get<unsigned>();
			Print(inst);
		})
	|"srl"_t + "reg"_t + ","_t + "reg"_t + ","_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned op: 6;
				unsigned shamt: 5;
				unsigned rd: 5;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rd = ast.term(1).get<unsigned>();
			inst.rt = ast.term(3).get<unsigned>();
			inst.shamt = ast.term(5).get<unsigned>();
			inst.op = 2;
			Print(inst);
		})
	|"lw"_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned offset: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.offset = ast.term(3).get<int>();
			inst.rt = ast.term(1).get<unsigned>();
			inst.op = 0x23;
			Print(inst);
		})
	|"sw"_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned offset: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.offset = ast.term(3).get<int>();
			inst.rt = ast.term(1).get<unsigned>();
			inst.op = 0x2b;
			Print(inst);
		})
	|"lui"_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned imm: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.imm = ast.term(3).get<int>();
			inst.rt = ast.term(1).get<unsigned>();
			inst.op = 0xf;
			Print(inst);
		})
	|"slt"_t + "reg"_t + ","_t + "reg"_t + ","_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned op: 6;
				unsigned : 5;
				unsigned rd: 5;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(5).get<unsigned>();
			inst.rd = ast.term(1).get<unsigned>();
			inst.op = 0x2a;
			Print(inst);
		})
	|"slti"_t + "reg"_t + ","_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned imm: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.rs = ast.term(3).get<unsigned>();
			inst.rt = ast.term(1).get<unsigned>();
			inst.imm = ast.term(5).get<int>();
			inst.op = 0xa;
			Print(inst);
		})
	|"beq"_t + "reg"_t + ","_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned offset: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.rs = ast.term(1).get<unsigned>();
			inst.rt = ast.term(3).get<unsigned>();
			inst.offset = ast.term(5).get<int>();
			inst.op = 4;
			Print(inst);
		})
	|"bne"_t + "reg"_t + ","_t + "reg"_t + ","_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned offset: 16;
				unsigned rt: 5;
				unsigned rs: 5;
				unsigned op: 6;
			} inst = {};
			inst.rs = ast.term(1).get<unsigned>();
			inst.rt = ast.term(3).get<unsigned>();
			inst.offset = ast.term(5).get<int>();
			inst.op = 5;
			Print(inst);
		})
	|"j"_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned target: 26;
				unsigned op: 6;
			} inst = {};
			inst.target = ast.term(1).get<int>();
			inst.op = 2;
			Print(inst);
		})
	|"jal"_t + "imm"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned target: 26;
				unsigned op: 6;
			} inst = {};
			inst.target = ast.term(1).get<int>();
			inst.op = 3;
			Print(inst);
		})
	|"j"_t + "reg"_t
		>> make_reflect<ast_type>([&](ast_type &ast)->value_type{
			struct {
				unsigned op: 6;
				unsigned : 15;
				unsigned rs: 5;
				unsigned : 6;
			} inst = {};
			inst.rs = ast.term(1).get<unsigned>();
			inst.op = 8;
			Print(inst);
		})